import(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <-flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-[,19:23]
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
apply(mtcars,2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
diff<- sapply(mtcars$hp, mtcars$cyl, mean)
diff<- tapply(mtcars$hp, mtcars$cyl, mean)
diff
abs(diff[1]-diff[3])
209-82
debug(ls)
ls()
end
q
import(swirl)
library(swirl)
swirl()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean([2, 2])
cachemean(2)
cachemean(vector(2,2))
swirl()
q()
list.dirs()
list.dirs()
list.files()
setwd('Documents/Coursera_R/')
list.files()
read.csv('getdata_data_ss06hid.csv')
data<-read.csv('getdata_data_ss06hid.csv')
View(data)
?strsplit
l<-strsplit(data, 'wgtp')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv', 'week4.csv')
data<-read.csv('week4.csv')
View(data)
l<-strsplit(names(data), 'wgtp')
l[15]
l[123]
l[[123]]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'week4_2.csv')
d2<-read.csv('week4_2.csv')
View(d2)
?read.csv
d2<-read.csv('week4_2.csv', skip = 4, col.names = c('country', 'Rank', 'n0', 'Economy', 'GPD', 'n1', 'n2', 'n3', 'n4', 'n5'))
l2<-strsplit(d2$GPD, '/,')
l2<-strsplit(d2$GPD, ',')
l2<-strsplit(d2$GPD, '//,')
class(d2$GPD)
gpd<- as.character(d2$GPD)
head(gpd)
l2<-strsplit(gpd, ',')
head(l2)
l2<-sub(",", "",gpd)
head(l2)
l2<-gsub(",", "",gpd)
head(l2)
sum(l2)
l2_num <- as.numeric(l2)
head(l2_num)
sum(l2_num)
?sum
?mean
mean(l2_num, na.rm = TRUE)
subset <- d2[1:190,]
dim(subset)
gpd<- as.character(subset$GPD)
l2<-gsub(",", "",gpd)
l2_num <- as.numeric(l2)
mean(l2_num, na.rm = TRUE)
grep("^United", subset$Economy)
grep("^United", subset$Economy),3
grep("^United", subset$Economy)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'edu.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv', 'edu.csv')
list.files()
edu <- read.csv('edu.csv')
View(edu)
View(merged)
merged(d2, edu, by.x="country", by.y="CountryCode")
merged<-merge(d2, edu, by.x="country", by.y="CountryCode")
View(merged)
merged<-merge(subset, edu, by.x="country", by.y="CountryCode")
notes <- as.character(merged$Special.Notes)
head(notes)
fisc <- notes[grepl("Fiscal year end", notes)]
head(fisc)
len(fisc)
dim(fisc)
june <- grep("June", fisc)
june
len(june)
len(june[1])
dim(june[1])
View(june)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
class(sampleTimes)
wday(sampleTimes[1])
sampleTimes[1]
?wday
library(lubridate)
wday(sampleTimes[1])
wday(sampleTimes[1], label = T)
year <- sampleTimes[grepl("2012", sampleTimes)]
View(year)
weekdays(year)
day<- weekdays(year)
monday <- day[grepl("Montag", day)]
View(monday)
list.files()
getwd('UCI HAR Dataset')
getwd('UCI HAR Dataset/')
getwd('/UCI HAR Dataset/')
setwd('UCI HAR Dataset')
list.files()
?read.table
train_X <- read.table('train/X_train.txt')
View(train_X)
dim(train_X)
train_y <- read.table('train/y_train.txt')
dim(train_y)
tot<-rbind(train_X, train_y)
# Loading features names
feature_names <- read.table('features.txt')
# Loading all train data
train_X <- read.table('train/X_train.txt', col.names = feature_names)
#train_y <- read.table('train/y_train.txt', col.names = y_label)
#train_subject <- read.table('train/subject_train.txt', col.names = subject)
# Loading all test data
test_X <- read.table('test/X_test.txt', col.names = feature_names)
#test_y <- read.table('test/y_test.txt', col.names = y_label)
#test_subject <- read.table('test/subject_test.txt', col.names = subject)
# Combine test set and train set
X <- rbind(train_X, test_X)
print(dim(train_X))
print(dim(test_X))
print(dim(X))
test_X <- read.table('test/X_test.txt')
dim(test_X)
dim(feature_names)
View(feature_names)
train_X <- read.table('train/X_train.txt', col.names = feature_names[:,2])
train_X <- read.table('train/X_train.txt', col.names = feature_names[,2])
# Loading features names
feature_names <- read.table('features.txt')
# Loading all train data with column names
train_X <- read.table('train/X_train.txt', col.names = feature_names[,2])
#train_y <- read.table('train/y_train.txt', col.names = y_label)
#train_subject <- read.table('train/subject_train.txt', col.names = subject)
# Loading all test data with column names
test_X <- read.table('test/X_test.txt', col.names = feature_names[,2])
#test_y <- read.table('test/y_test.txt', col.names = y_label)
#test_subject <- read.table('test/subject_test.txt', col.names = subject)
# Combine test set and train set
X <- rbind(train_X, test_X)
print(dim(train_X))
print(dim(test_X))
print(dim(X))
View(X)
